// import Notification from '../src/model/notificationModel';
// import mongoose from 'mongoose';
// import app from '../src/app';
// import request from 'supertest';
// import jwt from 'jsonwebtoken';
// import {
//   startConnection,
//   clearConnectedDatabase,
//   closeDatabaseConnection,
// } from '../mongodb_memory_server/database_memory';
// import sendEmail from '../src/nodemailer'

// // Connect to database memory before running any tests.
// beforeAll(async () => await startConnection());
// afterEach(async () => await clearConnectedDatabase());
// afterAll(async () => await closeDatabaseConnection());

// // const userDetails = {
// //   email: 'chidimmaIfeh@gmail.com',
// //   password: '1234567890',
// //   _id: "123456789011"
// // };



// // const token = jwt.sign(
// //     { userId: userDetails._id },
// //     process.env.ACCESS_TOKEN_SECRET as string,
// //     { expiresIn: '24h' },
// // );
    
// // const Email = "chidimmaifeh@gmail.com";
// //     const link = `localhost:3000/users/reset/${token}`;
// //     const body = `
// //     <div>Click the link below to reset your password</div><br/>
// //     <div>${link}</div>
// // `;
    
// describe('TEST FOR ENDPOINT: FORGOT PASSWORD ROUTE - POST /password/recovery-email', () => {
//     // test("if email not exist in database", async () => {
//     //         await request(app)
//     //     .post(`/users/recovery-email`)
//     //     .send({
//     //       "email": "chidimmaifeh@gmail.com"
//     //     })
//     //     .expect(404)
//     // });
    
//     test('User should be able to reset Password if email exist', async () => {
//         const cre = await Notification.create({
//             content: "You have been added as a contributor to this note note one",
//             noteId: "6159ac744343524862a5660b",
//             userId: "615a29bfae867c5f139b328d"
//         })
//     const data = await Notification.findById(cre.id)
//     if(data){
//         expect(data._id).toStrictEqual(cre._id)
//     }
    
//     //     await request(app)
//     //     .post("/users/recovery-email")
//     //     .send({ email: 'chidimmaifeh@gmail.com'})
//     //     .expect(200)
//     });
    
    
// });






import supertest from "supertest";
import {
  describe,
  beforeEach,
  test,
  expect,
  beforeAll,
  afterEach,
  afterAll,
} from "@jest/globals";
import { connect, clearDatabase, closeDatabase } from "./memory-db-handler";
import app from "../src/app";
import userModel from "../src/models/user";
import bcrypt from "bcrypt";
//initial declaration for typescript intellisense support
let request = supertest.agent();
/**
 * Connect to a new in-memory database before running any tests.
 */
beforeAll(async () => await connect());
/**
 * Clear all test data after every test.
 */
afterEach(async () => await clearDatabase());
/**
 * Remove and close the db and server.
 */
afterAll(async () => await closeDatabase());
/**
 * Resets the session for each tests.
 */
beforeEach(() => {
  request = supertest.agent(app);
});
const user1Login = {
  email: "kayodeodole@gmail.com",
  password: "123456",
};
const user1Reg = {
  email: "kayodeodole@gmail.com",
  password: bcrypt.hashSync("123456", 12),
  fullname: "kayode odole",
};
const loginSuccessText = "Found. Redirecting to /users/welcome";
const loginFailText = "Found. Redirecting to /users/loginfail";
describe("USER TEST", () => {
  test("should allow user to get tasks assigned to them.", async () => {
    //register user1 into the database
    await userModel.create(user1Reg);
    //login
    await request
      .post("/users/login")
      .send(user1Login)
      .expect(302)
      .expect((res) => {
        expect(res.text).toBe(loginSuccessText);
      });
    //user can get task assigned to them
    await request
      .get("/tasks")
      .expect(200)
      .expect((res) => {
        expect(Array.isArray(res.body.tasks)).toBe(true);
      });
  });
});